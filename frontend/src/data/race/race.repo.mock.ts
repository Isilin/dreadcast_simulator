import type { RaceResponseDto } from './race.dto';
import { toDomain } from './race.mapper';
import { raceArrayResponseSchema } from './race.schema';

import type { Race } from '@/domain';
import { sleep } from '@/utils/sleep';

const MOCK_RACES: RaceResponseDto[] = [
  {
    type: 'Humain',
    strength: 100,
    agility: 100,
    robustness: 100,
    perception: 100,
    stealth: 100,
    computing: 100,
    medicine: 100,
    engineering: 100,
    health: 100,
    stamina: 100,
  },
  {
    type: 'Elfe',
    strength: 60,
    agility: 120,
    robustness: 70,
    perception: 130,
    stealth: 110,
    computing: 100,
    medicine: 100,
    engineering: 100,
    health: 100,
    stamina: 100,
  },
  {
    type: 'Nain',
    strength: 125,
    agility: 100,
    robustness: 115,
    perception: 75,
    stealth: 75,
    computing: 100,
    medicine: 100,
    engineering: 100,
    health: 115,
    stamina: 80,
  },
  {
    type: 'Orc',
    strength: 150,
    agility: 75,
    robustness: 125,
    perception: 100,
    stealth: 75,
    computing: 60,
    medicine: 100,
    engineering: 90,
    health: 120,
    stamina: 105,
  },
  {
    type: 'Troll',
    strength: 125,
    agility: 80,
    robustness: 150,
    perception: 100,
    stealth: 75,
    computing: 65,
    medicine: 90,
    engineering: 90,
    health: 110,
    stamina: 110,
  },
  {
    type: 'Outrilien',
    strength: 80,
    agility: 110,
    robustness: 100,
    perception: 100,
    stealth: 100,
    computing: 85,
    medicine: 150,
    engineering: 95,
    health: 90,
    stamina: 90,
  },
  {
    type: 'Vautour',
    strength: 100,
    agility: 100,
    robustness: 90,
    perception: 100,
    stealth: 90,
    computing: 150,
    medicine: 85,
    engineering: 95,
    health: 80,
    stamina: 100,
  },
  {
    type: 'Gobelin',
    strength: 65,
    agility: 120,
    robustness: 70,
    perception: 100,
    stealth: 95,
    computing: 90,
    medicine: 90,
    engineering: 150,
    health: 90,
    stamina: 150,
  },
  {
    type: 'Kobold',
    strength: 75,
    agility: 135,
    robustness: 90,
    perception: 115,
    stealth: 125,
    computing: 60,
    medicine: 100,
    engineering: 100,
    health: 100,
    stamina: 100,
  },
  {
    type: 'Gnoll',
    strength: 120,
    agility: 120,
    robustness: 90,
    perception: 110,
    stealth: 90,
    computing: 80,
    medicine: 80,
    engineering: 100,
    health: 120,
    stamina: 90,
  },
  {
    type: 'Androide',
    strength: 105,
    agility: 95,
    robustness: 105,
    perception: 100,
    stealth: 80,
    computing: 120,
    medicine: 80,
    engineering: 105,
    health: 110,
    stamina: 110,
  },
];

export async function fetchRacesMock(): Promise<Race[]> {
  await sleep(1000);
  const validated = raceArrayResponseSchema.parse(MOCK_RACES);

  const sorted = validated.sort((a, b) => a.type.localeCompare(b.type));

  const races = sorted.map(toDomain);
  return races;
}
